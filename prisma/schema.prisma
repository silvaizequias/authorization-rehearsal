generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}


model User {
    id                  String      @id                 @default(cuid())
    createdAt           DateTime    @default(now())     @map("created_at")
    updatedAt           DateTime    @updatedAt          @map("updated_at")

    name                String      @db.VarChar(50)
    cpf                 String      @db.VarChar(14)
    email               String      @db.VarChar(50)
    phone               String      @db.VarChar(50)
    password            String      @db.VarChar(50)
    passwordhash        String      @db.VarChar(200)    @map("password_hash")
    img                 String?     @db.VarChar(50)
    companyName         String?     @db.VarChar(50)     @map("company_name")
    positionHeld        String?     @db.VarChar(50)     @map("position_held")
    active              Boolean     @default(true)

    roles               UsersOnRoles[]

    @@unique([cpf, email, phone])
    @@map("users")
}   

model UsersOnRoles {
    createdAt           DateTime    @default(now())     @map("created_at")
    updatedAt           DateTime    @updatedAt          @map("updated_at")

    userId              String      @map("user_id")
    user                User        @relation(fields: [userId], references: [id])
    roleId              String      @map("role_id")
    role                Role        @relation(fields: [roleId], references: [id])

    @@map("users_on_roles")
    @@id([userId, roleId])
}

model Role {
    id                  String          @id                 @default(cuid())
    createdAt           DateTime        @default(now())     @map("created_at")
    updatedAt           DateTime        @updatedAt          @map("updated_at")

    name                String          @db.VarChar(50)
    description         String?         @db.VarChar(200)

    organizations       OrganizationsOnRoles[]
    systems             SystemsOnRoles[]
    users               UsersOnRoles[]
    routes              Route[]

    @@map("roles")
}

model Organization {
    id                  String          @id                 @default(cuid())
    createdAt           DateTime        @default(now())     @map("created_at")
    updatedAt           DateTime        @updatedAt          @map("updated_at")

    name                String          @db.VarChar(50)
    description         String?         @db.VarChar(200)

    roles               OrganizationsOnRoles[]

    @@unique([name])
    @@map("organizations")
}

model OrganizationsOnRoles {
    createdAt           DateTime        @default(now())     @map("created_at")
    updatedAt           DateTime        @updatedAt          @map("updated_at")

    organizationId      String          @map("organization_id")
    organization        Organization    @relation(fields: [organizationId], references: [id])
    roleId              String          @map("role_id")
    role                Role            @relation(fields: [roleId], references: [id])

    @@map("organizations_on_roles")
    @@id([organizationId, roleId])
}

model System {
    id                  String          @id                 @default(cuid())
    createdAt           DateTime        @default(now())     @map("created_at")
    updatedAt           DateTime        @updatedAt          @map("updated_at")

    name                String          @db.VarChar(50)
    description         String?         @db.VarChar(200)

    roles               SystemsOnRoles[]

    @@unique([name])
    @@map("systems")
}

model SystemsOnRoles {
    createdAt           DateTime        @default(now())     @map("created_at")
    updatedAt           DateTime        @updatedAt          @map("updated_at")

    systemId            String          @map("system_id")
    system              System          @relation(fields: [systemId], references: [id])
    roleId              String          @map("role_id")
    role                Role            @relation(fields: [roleId], references: [id])

    @@map("systems_on_roles")
    @@id([systemId, roleId])
}

model Route {
    id                  String          @id                 @default(cuid())
    createdAt           DateTime        @default(now())     @map("created_at")
    updatedAt           DateTime        @updatedAt          @map("updated_at")

    roleId              String          @map("role_id")
    role                Role            @relation(fields: [roleId], references: [id])

    name                String?         @db.VarChar(50)
    description         String?         @db.VarChar(200)
    url                 String          @db.VarChar(50)
    method              String          @db.VarChar(10)

    @@map("routes")
}